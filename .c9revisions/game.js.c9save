{"ts":1354405168156,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//load the AMD modules we need\nrequire(['frozen/GameCore', 'frozen/ResourceManager', 'dojo/keys', 'frozen/box2d/Box', 'frozen/box2d/RectangleEntity', 'frozen/box2d/PolygonEntity', 'frozen/box2d/CircleEntity'],\n function(GameCore, ResourceManager, keys, Box, Rectangle, Polygon, Circle){\n\n  //dimensions same as canvas.\n  var gameH = 480;\n  var gameW = 770;\n  \n  var speed = 5;\n\n  var nyanStartX = 119;\n  var nyanStartY = 57;\n\n  var output = document.getElementById('output');\n\n  var rm = new ResourceManager();\n  var backImg = rm.loadImage('images/background.png');\n  var nyanImg = rm.loadImage('images/nyan.png');\n  var yarnImg = rm.loadImage('images/yarn.png');\n  var yipee = rm.loadSound('sounds/yipee.wav');\n\n  var box;\n  var world = {};\n\n  //pixels per meter for box2d\n  var SCALE = 30.0;\n\n  //objects in box2d need an id\n  var geomId = 1;\n\n  //shapes in the box2 world, locations are their centers\n  var nyan, moon, pyramid, ground, ceiling, leftWall, rightWall, yarn;\n\n\n\n  // create our box2d instance\n  box = new Box({intervalRate:60, adaptive:false, width:gameW, height:gameH, scale:SCALE, gravityY:9.8, resolveCollisions: true,\n    postSolve: function(idA, idB, impulse){\n      if(impulse > 3){\n        console.log(idA, idB, impulse);\n        rm.playSound(yipee);\n      }\n      if(idB == ground.id) {\n        location.reload();\n      }\n    }});\n\n  //create each of the shapes in the world\n  ground = new Rectangle({\n    id: geomId,\n    x: 385 / SCALE,\n    y: 480 / SCALE,\n    halfWidth: 1000 / SCALE,\n    halfHeight: 40 / SCALE,\n    staticBody: true\n  });\n  box.addBody(ground); //add the shape to the box\n  world[geomId] = ground; //keep a reference to the shape for fast lookup\n\n  geomId++;\n  celing = new Rectangle({\n    id: geomId,\n    x: 385 / SCALE,\n    y: -40 / SCALE,\n    halfWidth: 1000 / SCALE,\n    halfHeight: 40 / SCALE,\n    staticBody: true\n  });\n  box.addBody(celing);\n  world[geomId] = celing;\n\n  geomId++;\n  leftWall = new Rectangle({\n    id: geomId,\n    x: -80 / SCALE,\n    y: 240 / SCALE,\n    halfWidth: 40 / SCALE,\n    halfHeight: 1000 / SCALE,\n    staticBody: true\n  });\n  box.addBody(leftWall);\n  world[geomId] = leftWall;\n\n  rightWall = new Rectangle({\n    id: geomId,\n    x: 850 / SCALE,\n    y: 240 / SCALE,\n    halfWidth: 40 / SCALE,\n    halfHeight: 1000 / SCALE,\n    staticBody: true\n  });\n  box.addBody(rightWall);\n  world[geomId] = rightWall;\n\n  geomId++;\n  moon = new Circle({\n    id: geomId,\n    x: 626 / SCALE,\n    y: 120 / SCALE,\n    radius: 63 / SCALE,\n    staticBody: true\n  });\n  box.addBody(moon);\n  world[geomId] = moon;\n\n  geomId++;\n  pyramid = new Polygon({\n    id: geomId,\n    points: [{x: 320 / SCALE, y: 440 / SCALE}, {x: 446 / SCALE, y: 290 / SCALE}, {x: 565 / SCALE, y: 440 / SCALE}],\n    staticBody: true\n  });\n  box.addBody(pyramid);\n  world[geomId] = pyramid;\n\n  geomId++;\n  nyan = new Rectangle({\n    id: geomId,\n    x: nyanStartX / SCALE,\n    y: nyanStartY / SCALE,\n    halfWidth: 40 / SCALE,\n    halfHeight: 28 / SCALE,\n    staticBody: false,\n    draw: function(ctx, scale){ // we want to render the nyan cat with an image\n      ctx.save();\n      ctx.translate(this.x * scale, this.y * scale);\n      ctx.rotate(this.angle); // this angle was given to us by box2d's calculations\n      ctx.translate(-(this.x) * scale, -(this.y) * scale);\n      ctx.fillStyle = this.color;\n      ctx.drawImage(\n        nyanImg,\n        (this.x-this.halfWidth) * scale - 10, //lets offset it a little to the left\n        (this.y-this.halfHeight) * scale\n      );\n      ctx.restore();\n    }\n  });\n  box.addBody(nyan);\n  world[geomId] = nyan;\n/*\n  geomId++;\n  yarn = new Circle({\n    id: geomId,\n    x: 600 / SCALE,\n    y: 390 / SCALE,\n    radius: 30 / SCALE,\n    staticBody: false,\n    density: 0.5,  // al little lighter\n    restitution: 0.8, // a little bouncier\n    draw: function(ctx, scale){  //we also want to render the yarn with an image\n      ctx.save();\n      ctx.translate(this.x * scale, this.y * scale);\n      ctx.rotate(this.angle);\n      ctx.translate(-(this.x) * scale, -(this.y) * scale);\n      ctx.fillStyle = this.color;\n      ctx.drawImage(\n        yarnImg,\n        (this.x-this.radius) * scale,\n        (this.y-this.radius) * scale\n      );\n      ctx.restore();\n    }\n  });\n  box.addBody(yarn);\n  world[geomId] = yarn;\n*/\n\n\n\n  //setup a GameCore instance\n  var game = new GameCore({\n    canvasId: 'canvas',\n    resourceManager: rm,\n    initInput: function(im){\n      //tells the input manager to listen for key events\n      im.addKeyAction(keys.LEFT_ARROW);\n      im.addKeyAction(keys.RIGHT_ARROW);\n      im.addKeyAction(keys.UP_ARROW);\n\n      //the extra param says to only detect inital press\n      im.addKeyAction(keys.SPACE, true);\n    },\n    handleInput: function(im){\n      if(im.keyActions[keys.LEFT_ARROW].isPressed()){\n        box.applyImpulse(nyan.id, 180, speed);\n      }\n\n      if(im.keyActions[keys.RIGHT_ARROW].isPressed()){\n        box.applyImpulse(nyan.id, 0, speed);\n      }\n\n      if(im.keyActions[keys.UP_ARROW].isPressed()){\n        box.applyImpulse(nyan.id, 270, speed);\n      }\n\n      //.play sounds with the space bar !\n      if(im.keyActions[keys.SPACE].getAmount()){\n        rm.playSound(yipee);\n      }\n\n      //when creating geometry, you may want to use the to determine where you are on the canvas\n      //if(im.mouseAction.position){\n        //output.innerHTML = 'x: ' + im.mouseAction.position.x + ' y: ' + im.mouseAction.position.y;\n      //}\n    },\n    update: function(millis){\n      \n      //have box2d do an interation\n      box.update();\n\n      //update the dyanmic shapes with box2d calculations\n      var bodiesState = box.getState();\n      for (var id in bodiesState) {\n        var entity = world[id];\n        if (entity && !entity.staticBody){\n          entity.update(bodiesState[id]);\n        }\n      }\n    },\n    draw: function(context){\n      context.drawImage(backImg, 0, 0, this.width, this.height);\n      //ground.draw(context, SCALE);\n      //moon.draw(context, SCALE);\n      //pyramid.draw(context, SCALE);\n      nyan.draw(context, SCALE);\n      //yarn.draw(context, SCALE);\n    }\n  });\n\n  //if you want to take a look at the game object in dev tools\n  console.log(game);\n\n  //launch the game!\n  game.run();\n});"]],"start1":0,"start2":0,"length1":0,"length2":6219}]],"length":6219}
{"ts":1354409437051,"patch":[[{"diffs":[[0,"28,128);"],[1,"\n  \n    var sprite3Img = rm.loadImage('images/Exp_type_A.png');\n\n  //new sprite object maintian position, and velocities\n  var sprite3 = new Sprite({x:150,y:150, w:128, h: 128, dx:0, dy: 0});\n\n  //set the sprite animation to use 16 frames, 200 millis/frame, spritesheet, 128x128 pixels\n  sprite3.anim = new Animation().createFromTile(16,200,sprite3Img,128,128);"],[0,"\n\n  //pi"]],"start1":1516,"start2":1516,"length1":16,"length2":377},{"diffs":[[0,"te(millis);\n"],[1,"      sprite3.update(millis);\n"],[0,"      //have"]],"start1":6663,"start2":6663,"length1":24,"length2":54},{"diffs":[[0,"e(context);\n"],[1,"      sprite3.drawCurrentFrame(context);\n"],[0,"      //yarn"]],"start1":7345,"start2":7345,"length1":24,"length2":65}]],"length":7569,"saved":false}
{"ts":1354409565209,"patch":[[{"diffs":[[0,";\n      "],[-1,"//"],[0,"moon.dra"]],"start1":7167,"start2":7167,"length1":18,"length2":16}]],"length":7567,"saved":false}
